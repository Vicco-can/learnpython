1、函数式编程
  1.1 特点：
    把计算视为函数而非指令
    纯函数式编程：不需要变量，没有副作用，测试简单
    支持高阶函数，代码简洁

    python支持函数式编程特点：
        不是纯函数式编程：允许有变量

        支持高阶函数：函数也可以作为变量传入

        支持闭包：有了闭包就能返回函数

        有限度地支持匿名函数

    1.2、高阶函数
      变量可以指向函数，例 f=abs, f(-2)=2
      函数名就是指向函数的变量，例如abs = len abs([1,2,3]) 就等于 3
      高阶函数就是能够接收函数作为参数的函数，
      如def add(x,y,f):
            return f(x)+f(y)

    1.3 map()函数
        map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。

        例如，对于list [1, 2, 3, 4, 5, 6, 7, 8, 9]

        如果希望把list的每个元素都作平方，就可以用map()函数
        def f(x):
            return x*x
        print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
        利用map()函数，可以把一个 list 转换为另一个 list，只需要传入转换函数。

        由于list包含的元素可以是任何类型，因此，map() 不仅仅可以处理只包含数值的 list，
        事实上它可以处理包含任意类型的 list，只要传入的函数f可以处理这种数据类型。

    1.4 reduce()函数
        reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和 map()类似，
        一个函数 f，一个list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，
        reduce()对list的每个元素反复调用函数f，并返回最终结果值。
        def f(x, y):
            return x + y
        调用 reduce(f, [1, 3, 5, 7, 9])时，reduce函数将做如下计算：
            先计算头两个元素：f(1, 3)，结果为4；
            再把结果和第3个元素计算：f(4, 5)，结果为9；
            再把结果和第4个元素计算：f(9, 7)，结果为16；
            再把结果和第5个元素计算：f(16, 9)，结果为25；
            由于没有更多的元素了，计算结束，返回结果25。
        上述计算实际上是对 list 的所有元素求和。虽然Python内置了求和函数sum()，
        但是，利用reduce()求和也很简单。

        reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算：

        reduce(f, [1, 3, 5, 7, 9], 100)

        结果将变为125，因为第一轮计算是：

        计算初始值和第一个元素：f(100, 1)，结果为101。

    1.5 filter()函数
    filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，
    这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，
    返回由符合条件元素组成的新list。
    例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：
    def is_odd(x):
        return x % 2 == 1
    然后，利用filter()过滤掉偶数：
    filter(is_odd, [1, 4, 6, 7, 9, 12, 17])
    结果：[1, 7, 9, 17]

    利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：
    def is_not_empty(s):
        return s and len(s.strip()) > 0
    filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])
    # s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。
    当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')

    1.6 自定义排序函数


